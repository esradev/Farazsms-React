<?xml version="1.0" encoding="UTF-8"?>
<framework xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="schemas/frameworkDescriptionVersion1.1.4.xsd" frameworkId="org.wp-cli" name="WP-CLI_2/19/23, 6:51 AM_wp" invoke="EXECUTABLE C:\xampp\htdocs\farazsms\wp-content\plugins\farazsms\vendor\wp-cli\wp-cli\bin\wp.bat" alias="wp" enabled="true" version="2">
  <command>
    <name>cli alias add</name>
    <help><![CDATA[<strong>cli alias add</strong> &lt;key&gt; [--set-user=&lt;user&gt;] [--set-url=&lt;url&gt;] [--set-path=&lt;path&gt;] [--set-ssh=&lt;ssh&gt;] [--set-http=&lt;http&gt;] [--grouping=&lt;grouping&gt;] [--config=&lt;config&gt;]<br/><br/>Creates an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>[--set-user=&lt;user&gt;]<br>: Set user for alias.<br><br>[--set-url=&lt;url&gt;]<br>: Set url for alias.<br><br>[--set-path=&lt;path&gt;]<br>: Set path for alias.<br><br>[--set-ssh=&lt;ssh&gt;]<br>: Set ssh for alias.<br><br>[--set-http=&lt;http&gt;]<br>: Set http for alias.<br><br>[--grouping=&lt;grouping&gt;]<br>: For grouping multiple aliases.<br><br>[--config=&lt;config&gt;]<br>: Config file to be considered for operations.<br>---<br>default: global<br>options:<br> - global<br> - project<br>---<br><br>## EXAMPLES<br><br> # Add alias to global config.<br> $ wp cli alias add @prod --set-ssh=login@host --set-path=/path/to/wordpress/install/ --set-user=wpcli<br> Success: Added '@prod' alias.<br><br> # Add alias to project config.<br> $ wp cli alias add @prod --set-ssh=login@host --set-path=/path/to/wordpress/install/ --set-user=wpcli --config=project<br> Success: Added '@prod' alias.<br><br> # Add group of aliases.<br> $ wp cli alias add @multiservers --grouping=servera,serverb<br> Success: Added '@multiservers' alias.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli alias delete</name>
    <help><![CDATA[<strong>cli alias delete</strong> &lt;key&gt; [--config=&lt;config&gt;]<br/><br/>Deletes an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>[--config=&lt;config&gt;]<br>: Config file to be considered for operations.<br>---<br>options:<br> - global<br> - project<br>---<br><br>## EXAMPLES<br><br> # Delete alias.<br> $ wp cli alias delete @prod<br> Success: Deleted '@prod' alias.<br><br> # Delete project alias.<br> $ wp cli alias delete @prod --config=project<br> Success: Deleted '@prod' alias.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli alias get</name>
    <help><![CDATA[<strong>cli alias get</strong> &lt;key&gt;<br/><br/>Gets the value for an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>## EXAMPLES<br><br> # Get alias.<br> $ wp cli alias get @prod<br> ssh: dev@somedeve.env:12345/home/dev/<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli alias list</name>
    <help><![CDATA[<strong>cli alias list</strong> [--format=&lt;format&gt;]<br/><br/>Lists available WP-CLI aliases.<br/>## OPTIONS<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: yaml<br>options:<br> - yaml<br> - json<br> - var_export<br>---<br><br>## EXAMPLES<br><br> # List all available aliases.<br> $ wp cli alias list<br> ---<br> @all: Run command against every registered alias.<br> @prod:<br> ssh: runcommand@runcommand.io~/webapps/production<br> @dev:<br> ssh: vagrant@192.168.50.10/srv/www/runcommand.dev<br> @both:<br> - @prod<br> - @dev<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli alias update</name>
    <help><![CDATA[<strong>cli alias update</strong> &lt;key&gt; [--set-user=&lt;user&gt;] [--set-url=&lt;url&gt;] [--set-path=&lt;path&gt;] [--set-ssh=&lt;ssh&gt;] [--set-http=&lt;http&gt;] [--grouping=&lt;grouping&gt;] [--config=&lt;config&gt;]<br/><br/>Updates an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>[--set-user=&lt;user&gt;]<br>: Set user for alias.<br><br>[--set-url=&lt;url&gt;]<br>: Set url for alias.<br><br>[--set-path=&lt;path&gt;]<br>: Set path for alias.<br><br>[--set-ssh=&lt;ssh&gt;]<br>: Set ssh for alias.<br><br>[--set-http=&lt;http&gt;]<br>: Set http for alias.<br><br>[--grouping=&lt;grouping&gt;]<br>: For grouping multiple aliases.<br><br>[--config=&lt;config&gt;]<br>: Config file to be considered for operations.<br>---<br>options:<br> - global<br> - project<br>---<br><br>## EXAMPLES<br><br> # Update alias.<br> $ wp cli alias update @prod --set-user=newuser --set-path=/new/path/to/wordpress/install/<br> Success: Updated 'prod' alias.<br><br> # Update project alias.<br> $ wp cli alias update @prod --set-user=newuser --set-path=/new/path/to/wordpress/install/ --config=project<br> Success: Updated 'prod' alias.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli cache clear</name>
    <help><![CDATA[<strong>cli cache clear</strong> <br/><br/>Clears the internal cache.<br/>## EXAMPLES<br><br> $ wp cli cache clear<br> Success: Cache cleared.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli cache prune</name>
    <help><![CDATA[<strong>cli cache prune</strong> <br/><br/>Prunes the internal cache.<br/>Removes all cached files except for the newest version of each one.<br><br>## EXAMPLES<br><br> $ wp cli cache prune<br> Success: Cache pruned.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli check-update</name>
    <help><![CDATA[<strong>cli check-update</strong> [--patch] [--minor] [--major] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Checks to see if there is a newer version of WP-CLI available.<br/>Queries the Github releases API. Returns available versions if there are<br>updates available, or success message if using the latest release.<br><br>## OPTIONS<br><br>[--patch]<br>: Only list patch updates.<br><br>[--minor]<br>: Only list minor updates.<br><br>[--major]<br>: Only list major updates.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each update.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields. Defaults to version,update_type,package_url.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Check for update.<br> $ wp cli check-update<br> Success: WP-CLI is at the latest version.<br><br> # Check for update and new version is available.<br> $ wp cli check-update<br> +---------+-------------+-------------------------------------------------------------------------------+<br> | version | update_type | package_url |<br> +---------+-------------+-------------------------------------------------------------------------------+<br> | 0.24.1 | patch | https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.phar |<br> +---------+-------------+-------------------------------------------------------------------------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli cmd-dump</name>
    <help><![CDATA[<strong>cli cmd-dump</strong> <br/><br/>Dumps the list of installed commands, as JSON.<br/>## EXAMPLES<br><br> # Dump the list of installed commands.<br> $ wp cli cmd-dump<br> {"name":"wp","description":"Manage WordPress through the command-line.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n --path=&lt;path&gt;\n Path to the WordPress files.\n\n --ssh=&lt;ssh&gt;\n Perform operation against a remote server over SSH (or a container using scheme of "docker" or "docker-compose").\n\n --url=&lt;url&gt;\n Pretend request came from given URL. In multisite, this argument is how the target site is specified. \n\n --user=&lt;id|login|email&gt;\n<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli completions</name>
    <help><![CDATA[<strong>cli completions</strong> --line=&lt;line&gt; --point=&lt;point&gt;<br/><br/>Generates tab completion strings.<br/>## OPTIONS<br><br>--line=&lt;line&gt;<br>: The current command line to be executed.<br><br>--point=&lt;point&gt;<br>: The index to the current cursor position relative to the beginning of the command.<br><br>## EXAMPLES<br><br> # Generate tab completion strings.<br> $ wp cli completions --line='wp eva' --point=100<br> eval<br> eval-file<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli has-command</name>
    <help><![CDATA[<strong>cli has-command</strong> &lt;command_name&gt;...<br/><br/>Detects if a command exists<br/>This commands checks if a command is registered with WP-CLI.<br>If the command is found then it returns with exit status 0.<br>If the command doesn't exist, then it will exit with status 1.<br><br>## OPTIONS<br>&lt;command_name&gt;...<br>: The command<br><br>## EXAMPLES<br><br> # The "site delete" command is registered.<br> $ wp cli has-command "site delete"<br> $ echo $?<br> 0<br><br> # The "foo bar" command is not registered.<br> $ wp cli has-command "foo bar"<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>command_name ...</params>
  </command>
  <command>
    <name>cli info</name>
    <help><![CDATA[<strong>cli info</strong> [--format=&lt;format&gt;]<br/><br/>Prints various details about the WP-CLI environment.<br/>Helpful for diagnostic purposes, this command shares:<br><br>* OS information.<br>* Shell information.<br>* PHP binary used.<br>* PHP binary version.<br>* php.ini configuration file used (which is typically different than web).<br>* WP-CLI root dir: where WP-CLI is installed (if non-Phar install).<br>* WP-CLI global config: where the global config YAML file is located.<br>* WP-CLI project config: where the project config YAML file is located.<br>* WP-CLI version: currently installed version.<br><br>See [config docs](https://wp-cli.org/config/) for more details on global<br>and project config YAML files.<br><br>## OPTIONS<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: list<br>options:<br> - list<br> - json<br>---<br><br>## EXAMPLES<br><br> # Display various data about the CLI environment.<br> $ wp cli info<br> OS: Linux 4.10.0-42-generic #46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64<br> Shell: /usr/bin/zsh<br> PHP binary: /usr/bin/php<br> PHP version: 7.1.12-1+ubuntu16.04.1+deb.sury.org+1<br> php.ini used: /etc/php/7.1/cli/php.ini<br> WP-CLI root dir: phar://wp-cli.phar<br> WP-CLI packages dir: /home/person/.wp-cli/packages/<br> WP-CLI global config:<br> WP-CLI project config:<br> WP-CLI version: 1.5.0<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli param-dump</name>
    <help><![CDATA[<strong>cli param-dump</strong> [--with-values] [--format=&lt;format&gt;]<br/><br/>Dumps the list of global parameters, as JSON or in var_export format.<br/>## OPTIONS<br><br>[--with-values]<br>: Display current values also.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: json<br>options:<br> - var_export<br> - json<br>---<br><br>## EXAMPLES<br><br> # Dump the list of global parameters.<br> $ wp cli param-dump --format=var_export<br> array (<br> 'path' =&gt;<br> array (<br> 'runtime' =&gt; '=&lt;path&gt;',<br> 'file' =&gt; '&lt;path&gt;',<br> 'synopsis' =&gt; '',<br> 'default' =&gt; NULL,<br> 'multiple' =&gt; false,<br> 'desc' =&gt; 'Path to the WordPress files.',<br> ),<br> 'url' =&gt;<br> array (<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli update</name>
    <help><![CDATA[<strong>cli update</strong> [--patch] [--minor] [--major] [--stable] [--nightly] [--yes] [--insecure]<br/><br/>Updates WP-CLI to the latest release.<br/>Default behavior is to check the releases API for the newest stable<br>version, and prompt if one is available.<br><br>Use `--stable` to install or reinstall the latest stable version.<br><br>Use `--nightly` to install the latest built version of the master branch.<br>While not recommended for production, nightly contains the latest and<br>greatest, and should be stable enough for development and staging<br>environments.<br><br>Only works for the Phar installation mechanism.<br><br>## OPTIONS<br><br>[--patch]<br>: Only perform patch updates.<br><br>[--minor]<br>: Only perform minor updates.<br><br>[--major]<br>: Only perform major updates.<br><br>[--stable]<br>: Update to the latest stable release. Skips update check.<br><br>[--nightly]<br>: Update to the latest built version of the master branch. Potentially unstable.<br><br>[--yes]<br>: Do not prompt for confirmation.<br><br>[--insecure]<br>: Retry without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<br><br>## EXAMPLES<br><br> # Update CLI.<br> $ wp cli update<br> You have version 0.24.0. Would you like to update to 0.24.1? [y/n] y<br> Downloading from https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.phar...<br> New version works. Proceeding to replace.<br> Success: Updated WP-CLI to 0.24.1.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli version</name>
    <help><![CDATA[<strong>cli version</strong> <br/><br/>Prints WP-CLI version.<br/>## EXAMPLES<br><br> # Display CLI version.<br> $ wp cli version<br> WP-CLI 0.24.1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>help</name>
    <help><![CDATA[<strong>help</strong> [&lt;command&gt;...]<br/><br/>Gets help on WP-CLI, or on a specific command.<br/>## OPTIONS<br><br>[&lt;command&gt;...]<br>: Get help on a specific command.<br><br>## EXAMPLES<br><br> # get help for `core` command<br> wp help core<br><br> # get help for `core download` subcommand<br> wp help core download<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "docker-compose-run", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --exec=&lt;php-code&gt;<br> Execute PHP code before running the command (may be used more than once).<br><br> --context=&lt;context&gt;<br> Load WordPress in a given context.<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;command&gt;...[=null]</params>
  </command>
</framework>

